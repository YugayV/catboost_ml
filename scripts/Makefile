.PHONY: help install test lint format build deploy clean setup-ci

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python
PIP := pip
PROJECT_NAME := catboost-gcp-deployment
VENV := venv
GCP_PROJECT_ID := $(shell gcloud config get-value project)

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è $(PROJECT_NAME):"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	$(PYTHON) -m venv $(VENV)
	$(VENV)/Scripts/activate && $(PIP) install --upgrade pip
	$(VENV)/Scripts/activate && $(PIP) install -r requirements/requirements.txt
	$(VENV)/Scripts/activate && $(PIP) install -r requirements/test_requirements.txt
	$(VENV)/Scripts/activate && $(PIP) install -e .
	@echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"

install-dev: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	$(VENV)/Scripts/activate && $(PIP) install black isort flake8 mypy bandit safety pre-commit
	$(VENV)/Scripts/activate && pre-commit install
	@echo "‚úÖ Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	$(VENV)/Scripts/activate && $(PYTHON) -m pytest tests/ -v

test-coverage: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º..."
	$(VENV)/Scripts/activate && $(PYTHON) -m pytest tests/ -v --cov=classification_model --cov-report=html --cov-report=term

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞..."
	$(VENV)/Scripts/activate && flake8 classification_model/ packages/ml_api/
	$(VENV)/Scripts/activate && black --check classification_model/ packages/ml_api/
	$(VENV)/Scripts/activate && isort --check-only classification_model/ packages/ml_api/

format: ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
	$(VENV)/Scripts/activate && black classification_model/ packages/ml_api/
	$(VENV)/Scripts/activate && isort classification_model/ packages/ml_api/

security: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
	@echo "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
	$(VENV)/Scripts/activate && bandit -r classification_model/ packages/ml_api/
	$(VENV)/Scripts/activate && safety check

prepare-data: ## –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	@echo "üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
	@if [ ! -f "classification_model/datasets/Dataset.csv" ]; then \
		echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞..."; \
		mkdir -p classification_model/datasets; \
		echo "DV_R,DA_R,AV_R,AA_R,PM_R,FIN_JGMT" > classification_model/datasets/Dataset.csv; \
		$(PYTHON) -c "import random, csv; [csv.writer(open('classification_model/datasets/Dataset.csv', 'a', newline='')).writerow([random.uniform(300, 350), random.uniform(7000, 9000), random.uniform(350, 400), random.uniform(7000, 8000), random.uniform(9000, 10000), random.randint(0, 1)]) for i in range(1000)]"; \
		echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω!"; \
	else \
		echo "‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!"; \
	fi

train: prepare-data ## –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
	@echo "üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."
	$(VENV)/Scripts/activate && export PYTHONPATH="${PYTHONPATH}:$(shell pwd)" && $(PYTHON) classification_model/train_pipeline.py
	@echo "‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!"

api-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "üåê –ó–∞–ø—É—Å–∫ API –ª–æ–∫–∞–ª—å–Ω–æ..."
	$(VENV)/Scripts/activate && cd packages/ml_api && $(PYTHON) run.py

test-api: ## –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
	@curl -f http://localhost:5000/health && echo "‚úÖ Health check OK"
	@curl -f http://localhost:5000/version && echo "‚úÖ Version check OK"
	@curl -X POST http://localhost:5000/v1/predict/classification \
		-H "Content-Type: application/json" \
		-d '{"inputs": [{"DV_R": 320, "DA_R": 8000, "AV_R": 370, "AA_R": 7500, "PM_R": 9500}]}' \
		&& echo "‚úÖ Prediction test OK"

build-package: ## –°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç –º–æ–¥–µ–ª–∏
	@echo "üì¶ –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞..."
	$(VENV)/Scripts/activate && $(PYTHON) setup.py sdist bdist_wheel
	@echo "‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω!"

build-docker: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	@echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	docker build -t $(PROJECT_NAME):latest .
	@echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω!"

test-docker: build-docker ## –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Docker –æ–±—Ä–∞–∑
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞..."
	docker run -d -p 5000:5000 --name test-api $(PROJECT_NAME):latest
	@sleep 15
	@curl -f http://localhost:5000/health && echo "‚úÖ Docker health check OK"
	@docker stop test-api
	@docker rm test-api
	@echo "‚úÖ Docker —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!"

push-docker: ## –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑ –≤ GCR
	@echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Google Container Registry..."
	@if [ -z "$(GCP_PROJECT_ID)" ]; then \
		echo "‚ùå GCP_PROJECT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: gcloud config set project YOUR_PROJECT_ID"; \
		exit 1; \
	fi
	gcloud auth configure-docker
	docker tag $(PROJECT_NAME):latest gcr.io/$(GCP_PROJECT_ID)/catboost-api:latest
	docker push gcr.io/$(GCP_PROJECT_ID)/catboost-api:latest
	@echo "‚úÖ –û–±—Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"

deploy-gcp: push-docker ## –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ Google Cloud Run
	@echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Google Cloud Run..."
	gcloud run deploy catboost-api \
		--image gcr.io/$(GCP_PROJECT_ID)/catboost-api:latest \
		--platform managed \
		--region us-central1 \
		--allow-unauthenticated \
		--memory 2Gi \
		--cpu 2 \
		--max-instances 10
	@echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	find . -type d -name __pycache__ -delete
	find . -type f -name "*.pyc" -delete
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

setup-ci: ## –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD
	@echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD..."
	$(PYTHON) scripts/ci_cd_setup.py
	@echo "‚úÖ CI/CD –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"

all: install install-dev prepare-data lint test build-package build-docker ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

ci: lint test security build-package build-docker test-docker ## –ó–∞–ø—É—Å—Ç–∏—Ç—å CI –ø–∞–π–ø–ª–∞–π–Ω –ª–æ–∫–∞–ª—å–Ω–æ